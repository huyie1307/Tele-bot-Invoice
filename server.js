const TelegramBot = require('node-telegram-bot-api');
const { google } = require('googleapis');

// ƒê·ªçc bi·∫øn m√¥i tr∆∞·ªùng Railway (ƒë√£ setup s·∫µn)
const token = process.env.BOT_TOKEN;
const SPREADSHEET_ID = process.env.SPREADSHEET_ID;
const SHEET_NAME = process.env.SHEET_NAME;
const credentials = JSON.parse(process.env.GOOGLE_CREDENTIALS);

// Kh·ªüi t·∫°o bot
const bot = new TelegramBot(token, { polling: true });

// Kh·ªüi t·∫°o Google Auth
const auth = new google.auth.GoogleAuth({
  credentials: credentials,
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

const userStates = {};
const userData = {};

// Danh m·ª•c ph√¢n c·∫•p
const categories = {
  'N∆∞·ªõc': {
    'Bia lon': ['SG', 'HN'],
    'Bia chai': ['SG', 'HN'],
    'N∆∞·ªõc ng·ªçt': ['C2', 'T·∫Øc m·∫≠t ong', 'Tr√† b√≠ ƒëao Wonderfarm', 'Tr√† xanh Kh√¥ng ƒë·ªô', 'CG Foods'],
    'N∆∞·ªõc tƒÉng l·ª±c': ['B√≤ h√∫c', 'Number 1', 'Wakeup 247', 'Sting ƒë·ªè', 'Sting v√†ng'],
    'S·ªØa': ['Kun v·ªã cam', 'Kun v·ªã d√¢u', 'Kun nhi·ªát ƒë·ªõi', 'CG Foods ng√¥', 'H√†n D∆∞a', 'H√†n D√¢u', 'H√†n Cafe']
  },
  'G·∫°o': {
    'Th√°i': ['G·∫°o C√≤ 10kg', 'G·∫°o ƒê·ªãa 10kg'],
    'Nh·∫≠t': ['G·∫°o Japonica 10kg', 'G·∫°o Japonica 20kg'],
    'Vi·ªát': ['ST25 10kg', 'ST25 5kg', 'ST25 1kg', 'ST25 0.6kg', 'ST25 2kg']
  },
  'C√† Ph√™': {
    'G7': ['H·ªôp 21', 'H·ªôp 18', 'ƒêen', 'ƒêen ƒë√°', 'Rumi V√†ng', 'Motherland V√†ng', 'G√≥i 50', 'G√≥i 100', 'X2'],
    'Legend': ['Capu Mocha', 'Capu Hazelnut'],
    'Ch·∫ø Phin': ['3', '4', '5'],
    'King Coffee': ['G√≥i 48', 'G√≥i 45', 'H·ªôp 20', 'H·ªôp 18', 'G√≥i 88'],
    'Me Trang': ['Arabica 500g', 'Ch·ªìn 500g', 'ArabicaRobusta 500g', 'OceanBlue 500g', 'Culi 500g', 'Robusta', 'Mero 500g'],
    'MacCoffee': ['Ph·ªë'],
    'C&Sea': ['Mu·ªëi ho√† tan'],
    'Durica': ['Ho√† tan s·∫ßu ri√™ng'],
    'WakeUp': ['Ch·ªìn 306']
  },
  'ƒê√¥ng l·∫°nh': {
    'Chanh leo': ['T√∫i', 'Vi√™n'],
    'Xo√†i': ['M√° 1kg', 'M√° 2kg', 'Vi√™n 1kg'],
    'Kh√°c': ['B∆°', 'D·ª©a M·∫≠t', 'Thanh Long', 'S·∫ßu Ri√™ng']
  },
  'M√¨ ƒÉn li·ªÅn': {
    'M√¨': ['H·∫£o H·∫£o', 'Omachi b√≤', 'Omachi t√¥m', 'Omachi s∆∞·ªùn', 'Miliket', 'Chua Cay', 'L·∫©u Th√°i', 'G√† cay', 'H·ªìng', 'Si√™u cay', 'Indomie'],
    'Mi·∫øn': ['Ph√∫ H∆∞∆°ng s∆∞·ªùn', 'Ph√∫ H∆∞∆°ng th·ªãt b·∫±m', 'Ph√∫ H∆∞∆°ng mƒÉng'],
    'Ph·ªü': ['Vifon g√†(b√°t)', 'Vifon b√≤(b√°t)', 'Vifon b√≤(g√≥i)', 'Th√¨n', 'ƒê·ªá Nh·∫•t b√≤', 'ƒê·ªá Nh·∫•t g√†', 'ƒê·ªá Nh·∫•t t√¥m'],
    'B√°nh ƒëa': ['Vifon']
  },
  'B√°nh k·∫πo': {
    'B√°nh G·∫°o': ['An v·ªã v·ª´ng', 'An v·ªã t·∫£o bi·ªÉn', 'One One v·ªã m·∫Øn', 'One One v·ªã s·ªØa ng√¥', 'One One v·ªã ph√¥ mai', 'One One v·ªã t·∫£o bi·ªÉn'],
    'B√°nh ng·ªçt': ['Eurocake v·ªã truy·ªÅn th·ªëng', 'Eurocake v·ªã chu·ªëi', 'Eurocake v·ªã d√¢u'],
    'K·∫πo b√≥c v·ªè': ['Xo√†i', 'ƒê√†o', 'Coca', 'Cam', 'Xo√†i xanh'],
    'K·∫πo c·ª©ng': ['·ªîi', 'C√† ph√™'],
    'K·∫πo d·∫ªo': [],
    'K·∫πo L·ªçt v·ªè': ['Nho', 'Mix'],
    'K·∫πo Milkolf': [],
    'K·∫πo Misoca': [],
    'Th·∫°ch': ['Headway', 'New choice', 'ZaiZai tr√† s·ªØa', 'ZaiZai hoa qu·∫£', 'ZaiZai ph√¥mai']
  }
};

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  userStates[chatId] = 'awaiting_customer';
  userData[chatId] = {};
  bot.sendMessage(chatId, 'üë§ Nh·∫≠p t√™n kh√°ch h√†ng:', {
    reply_markup: {
      keyboard: [['/start']],
      resize_keyboard: true
    }
  });
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const state = userStates[chatId];

  if (!state || text.startsWith('/')) return;

  if (state === 'awaiting_customer') {
    userData[chatId].customer = text;
    userStates[chatId] = 'awaiting_category';
    bot.sendMessage(chatId, 'üõí Ch·ªçn danh m·ª•c:', {
      reply_markup: { keyboard: [['/start'], ...Object.keys(categories).map(c => [c])], resize_keyboard: true }
    });

  } else if (state === 'awaiting_category') {
    if (!categories[text]) return;
    userData[chatId].category = text;
    userStates[chatId] = 'awaiting_subcategory';
    bot.sendMessage(chatId, `üîç Ch·ªçn nh√≥m h√†ng thu·ªôc "${text}":`, {
      reply_markup: { keyboard: [['/start'], ...Object.keys(categories[text]).map(i => [i])], resize_keyboard: true }
    });

  } else if (state === 'awaiting_subcategory') {
    const category = userData[chatId].category;
    if (!categories[category][text]) return;
    userData[chatId].subcategory = text;
    userStates[chatId] = 'awaiting_product';
    const items = categories[category][text];
    if (items.length > 0) {
      bot.sendMessage(chatId, `üì¶ Ch·ªçn s·∫£n ph·∫©m thu·ªôc nh√≥m "${text}":`, {
        reply_markup: { keyboard: [['/start'], ...items.map(i => [i])], resize_keyboard: true }
      });
    } else {
      userData[chatId].product = text;
      userStates[chatId] = 'awaiting_quantity';
      bot.sendMessage(chatId, '‚úèÔ∏è Nh·∫≠p s·ªë l∆∞·ª£ng:', {
        reply_markup: { keyboard: [['/start']], resize_keyboard: true }
      });
    }

  } else if (state === 'awaiting_product') {
    userData[chatId].product = text;
    userStates[chatId] = 'awaiting_quantity';
    bot.sendMessage(chatId, '‚úèÔ∏è Nh·∫≠p s·ªë l∆∞·ª£ng:', {
      reply_markup: { keyboard: [['/start']], resize_keyboard: true }
    });

  } else if (state === 'awaiting_quantity') {
    userData[chatId].quantity = text;
    userStates[chatId] = 'awaiting_price';
    bot.sendMessage(chatId, 'üíµ Nh·∫≠p gi√°:', {
      reply_markup: { keyboard: [['/start']], resize_keyboard: true }
    });

  } else if (state === 'awaiting_price') {
    userData[chatId].price = text;

    try {
      await appendToGoogleSheet(userData[chatId]);
      bot.sendMessage(chatId, `‚úÖ ƒê√£ l∆∞u:\nüë§ ${userData[chatId].customer}\nüìÇ ${userData[chatId].category} > ${userData[chatId].subcategory}\nüì¶ ${userData[chatId].product}\nüî¢ SL: ${userData[chatId].quantity}\nüíµ Gi√°: ${userData[chatId].price}`, {
        reply_markup: { keyboard: [['/start']], resize_keyboard: true }
      });
    } catch (error) {
      console.error("L·ªói ghi v√†o Google Sheets:", error);
      bot.sendMessage(chatId, "‚ùå L·ªói ghi v√†o Google Sheets.", {
        reply_markup: { keyboard: [['/start']], resize_keyboard: true }
      });
    }

    delete userStates[chatId];
    delete userData[chatId];
  }
});

async function appendToGoogleSheet(entry) {
  const client = await auth.getClient();
  const sheets = google.sheets({ version: 'v4', auth: client });

  const row = [
    entry.customer,
    `${entry.category} - ${entry.subcategory} - ${entry.product}`,
    entry.quantity,
    entry.price,
  ];

  await sheets.spreadsheets.values.append({
    spreadsheetId: SPREADSHEET_ID,
    range: `${SHEET_NAME}!A1`,
    valueInputOption: 'USER_ENTERED',
    insertDataOption: 'INSERT_ROWS',
    resource: { values: [row] },
  });
}
