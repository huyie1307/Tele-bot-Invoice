// Debug bi·∫øn m√¥i tr∆∞·ªùng
console.log("BOT_TOKEN:", process.env.BOT_TOKEN);
console.log("SPREADSHEET_ID:", process.env.SPREADSHEET_ID);
console.log("SHEET_NAME:", process.env.SHEET_NAME);
console.log("GOOGLE_CREDENTIALS loaded:", !!process.env.GOOGLE_CREDENTIALS); // true n·∫øu c√≥

const TelegramBot = require('node-telegram-bot-api');
const { google } = require('googleapis');

// L·∫•y bi·∫øn m√¥i tr∆∞·ªùng t·ª´ Railway
const token = process.env.BOT_TOKEN;
const SPREADSHEET_ID = process.env.SPREADSHEET_ID;
const SHEET_NAME = process.env.SHEET_NAME;
const credentials = JSON.parse(process.env.GOOGLE_CREDENTIALS);

// Kh·ªüi t·∫°o bot Telegram
const bot = new TelegramBot(token, { polling: true });

// Google Auth
const auth = new google.auth.GoogleAuth({
  credentials: credentials,
  scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});

// State qu·∫£n l√Ω ng∆∞·ªùi d√πng
const userStates = {};
const userData = {};
const products = ['Cam', 'T√°o', 'Nho'];

// L·ªánh /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  bot.sendMessage(chatId, 'üë§ Nh·∫≠p t√™n kh√°ch h√†ng:');
  userStates[chatId] = 'awaiting_customer';
  userData[chatId] = {};
});

// X·ª≠ l√Ω lu·ªìng nh·∫≠p d·ªØ li·ªáu
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const state = userStates[chatId];

  if (!state || text.startsWith('/')) return; // B·ªè qua l·ªánh kh√°c

  if (state === 'awaiting_customer') {
    userData[chatId].customer = text;
    userStates[chatId] = 'awaiting_product';
    bot.sendMessage(chatId, 'üõí Ch·ªçn h√†ng h√≥a:', {
      reply_markup: {
        keyboard: [products],
        resize_keyboard: true,
        one_time_keyboard: true,
      },
    });
  } else if (state === 'awaiting_product' && products.includes(text)) {
    userData[chatId].product = text;
    userStates[chatId] = 'awaiting_quantity';
    bot.sendMessage(chatId, '‚úèÔ∏è Nh·∫≠p s·ªë l∆∞·ª£ng:');
  } else if (state === 'awaiting_quantity') {
    userData[chatId].quantity = text;
    userStates[chatId] = 'awaiting_price';
    bot.sendMessage(chatId, 'üíµ Nh·∫≠p gi√°:');
  } else if (state === 'awaiting_price') {
    userData[chatId].price = text;

    // Ghi d·ªØ li·ªáu v√†o Google Sheets
    await appendToGoogleSheet(userData[chatId], chatId);

    // G·ª≠i th√¥ng b√°o th√†nh c√¥ng
    bot.sendMessage(
      chatId,
      `‚úÖ ƒê√£ l∆∞u:\nüë§ ${userData[chatId].customer}\nüì¶ ${userData[chatId].product}\nüî¢ SL: ${userData[chatId].quantity}\nüíµ Gi√°: ${userData[chatId].price}`
    );

    // X√≥a state
    delete userStates[chatId];
    delete userData[chatId];
  }
});

// Ghi d·ªØ li·ªáu v√†o Google Sheets
async function appendToGoogleSheet(entry, chatId) {
  try {
    const client = await auth.getClient();
    const sheets = google.sheets({ version: 'v4', auth: client });

    const row = [entry.customer, entry.product, entry.quantity, entry.price];

    await sheets.spreadsheets.values.append({
      spreadsheetId: SPREADSHEET_ID,
      range: `${SHEET_NAME}!A1`,
      valueInputOption: 'USER_ENTERED',
      insertDataOption: 'INSERT_ROWS',
      resource: { values: [row] },
    });

    console.log('‚úÖ ƒê√£ ghi v√†o Google Sheets:', row);
  } catch (error) {
    console.error('‚ùå L·ªói ghi v√†o Google Sheets:', error);
    bot.sendMessage(chatId, '‚ö†Ô∏è L·ªói khi l∆∞u v√†o Google Sheets. Vui l√≤ng th·ª≠ l·∫°i.');
  }
}
